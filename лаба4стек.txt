org     100h

InputC:
        mov     di, StComC
        call    OutStr

        mov     di, C
        call    InStr

        mov     si, C
        call    StrToInt
        push    ax

        call    Newline

InputD:
        mov     di, StComD
        call    OutStr

        mov     di, D
        call    InStr

        mov     si, D
        call    StrToInt
        push    ax

        call    Newline

Calculations:
        call    Calc

        mov     di, Expression
        call    OutStr

        call    OutInt

        call    PAK
        ret
;/////////////////////////////////////////////////;
StComC:         db      "Enter number C : $"
C               dw     6, 0, 5 dup ?

StComD:         db      "Enter number D : $"
D               dw      6, 0, 5 dup ?

Expression      db      "C/(D^2+1)+1= $"

Press           db      "Press any key...$"
bufO            db      10, 0, 10 dup ?
;/////////////////////////////////////////////////;
Calc:           
        push     bp
        mov      bp, sp
        push     bx
        push     cx
        push     dx

        mov     bx, [bp+4]
        mov     ax,bx
        mul     bx

        add     ax,1
        adc     dx,0

        mov     bx,ax

        movzx   eax, dx
        shl     eax,16
        mov     ax,bx

        xor     edx,edx
        xor     ebx, ebx
        mov     bx, [bp+6]
        xchg    eax,ebx
        div     ebx

        add     eax,1

        pop     dx
        pop     cx
        pop     bx
        pop     bp
ret     4

StrToInt:
        push    dx
        push    bx
        push    cx
        push    di

        xor     dh, dh
        xor     ax, ax
        xor     ch, ch
        xor     bx,bx
        mov     di, 10
        mov     cl, [si+1]
        add     si, 2

@@:
        mov     bl, [si]
        inc     si
        sub     bx, 30h
        mul     di
        add     ax,bx
        loop    @B

        pop     di
        pop     cx
        pop     bx
        pop     dx
ret

OutInt:
        push    dx
        push    bx
        push    cx
        push    di

        xor     si, si
        xor     cx, cx


        mov     bl, 10

PartOne:
        div     bl
        movzx   dx, ah
        push    dx
        movzx   ax, al
        Inc     cx
        cmp     ax, 0
        jnz     PartOne

PartTwo:
        pop     dx
        add     dl, '0'
        mov     [bufO+si], dl
        Inc     si
        loop    PartTwo
        mov     [bufO+si], "$"

        mov     di, bufO
        call    OutStr

        pop     di
        pop     cx
        pop     bx
        pop     dx
ret

PAK:
        call    Newline

        mov     di, Press
        call    OutStr

        mov     ax, $0C08
        int     21h
        test    al, al
        jnz     @F
        mov     ah, $08
        int     21h
@@:
        ret

InStr:
        push    ax
        mov     ah, $0A
        xchg    dx, di
        int     21h

        xchg    dx, di
        pop     ax
ret

OutStr:
        push    ax
        mov     ah, $09
        xchg    dx, di
        int     21h

        xchg    dx, di
        pop     ax
ret

Newline:
        push    ax
        push    dx

        mov     ah, $02
        mov     dl,  $0A
        int     21h

        pop     dx
        pop     ax
ret
